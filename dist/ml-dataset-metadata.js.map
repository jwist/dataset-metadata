{"version":3,"file":"ml-dataset-metadata.js","sources":["../lib/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// import Matrix from 'ml-matrix';\n\n/**\n * create new metadata object from 2D array\n * @param {Array} values - a 2d array with metadata values\n * @param {Object} [options]\n * @param {Array} [options.headers=[...Array(columns).keys()]] - an array with metadata headers\n * @param {Array} [options.IDs=[...Array(rows).keys()]] - an array with IDs\n */\nclass METADATA {\n  constructor(values, options = {}) {\n    let { columns,\n      rows } = [];\n\n    if (values === true) {\n      const metadata = options;\n      this.headers = metadata.headers;\n      this.IDs = metadata.IDs;\n      this.values = options.values;\n    } else {\n      columns = values.length;\n      rows = values[0].length;\n      this.values = values;\n      let {\n        headers = [...Array(columns).keys()].map((x) => (x + 1).toString()),\n        IDs = [...Array(rows).keys()].map((x) => (x + 1).toString())\n      } = options;\n\n      this.headers = headers;\n      this.IDs = IDs;\n    }\n  }\n\n  /**\n   * load metadata\n   * @param {Boolean} [metadata=true] - a boolean\n   * @param {Object} [options]\n   * @param {JSON} [options.metadata] - a metadata object\n   * @return {METADATA} - a metdata object\n   */\n  static load(metadata) {\n    if (typeof metadata.name !== 'string') {\n      throw new TypeError('metadata must have a name property');\n    }\n    if (metadata.name !== 'metadata') {\n      throw new RangeError(`invalid model: ${metadata.name}`);\n    }\n    return new METADATA(true, metadata);\n  }\n\n  /**\n   * save metadata to JSON\n   * @return {JSON} - a JSON with metadata\n   */\n  toJSON() {\n    return {\n      name: 'metadata',\n      headers: this.headers,\n      IDs: this.IDs,\n      values: this.values,\n    };\n  }\n\n  /**\n     * listMetadata\n     * @return {Array} - an array with headers\n     */\n  list() {\n    return this.headers;\n  }\n\n  /**\n     * add metadata\n     * @param {Array} value - an array with metadata\n     * @param {String} [by = 'column'] - select by row or by column\n     * @param {Object} [options]\n     * @param {String} [options.header] - a header for new metadata\n     */\n  append(values, by = 'column', options = {}) {\n    if (by === 'column') {\n      let { header = (this.headers.length + 1)\n        .toString() } = options;\n\n      if (typeof (header) !== 'string') {\n        console.warn('header was coerced to string');\n        header = header.toString();\n      }\n\n      if (this.headers.includes(header)) {\n        throw new Error('this header already exist');\n      }\n\n      if (values.length === this.values[0].length) {\n        this.values.push(values);\n        this.headers.push(header);\n      } else {\n        throw new Error('dimension doesn\\'t match');\n      }\n    } else if (by === 'row') {\n      let { ID = (this.IDs.length + 1)\n        .toString() } = options;\n\n      if (typeof (ID) !== 'string') {\n        console.warn('ID was coerced to string');\n        ID = ID.toString();\n      }\n\n      if (this.IDs.includes(ID)) {\n        throw new Error('this ID already exist');\n      }\n\n      if (values.length === this.values.length) {\n        this.values.map((x, idx) => x.push(values[idx]));\n        this.IDs.push(ID);\n      } else {\n        throw new Error('dimension doesn\\'t match');\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * remove row or column by index or name\n   * @param {any} index - an index or a column/row name\n   * @param {String} [by = 'row'] - select by row or by column\n   */\n  remove(index, by = 'row') {\n    if (typeof index !== 'object') {\n      index = [index];\n    }\n    if (by === 'column') {\n      index.forEach((el, idx) => {\n        if (typeof (el) === 'number') {\n          index[idx] = this.headers[el];\n        }\n      });\n      index.forEach((el, idx) => {\n        let id = this.headers.indexOf(index[idx]);\n        if (id > -1) {\n          this.headers.splice(id, 1);\n          this.values.splice(id, 1);\n        }\n      });\n    } else if (by === 'row') {\n      index.forEach((el, idx) => {\n        if (typeof el === 'number') {\n          index[idx] = this.IDs[el];\n        }\n      });\n      index.forEach((el, idx) => {\n        let id = this.IDs.indexOf(index[idx]);\n        if (id > -1) {\n          this.IDs.splice(id, 1);\n          this.values.map((x) => x.splice(id, 1));\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n     *\n     * @param {String} title - a title\n     * @return {Object} return { title, groupIDs, nClass, classVector, classFactor, classMatrix }\n     */\n  get(header) {\n    let index = this.headers.indexOf(header);\n    let classVector = this.values[index];\n\n    return classVector;\n  }\n\n  summary(header) {\n    let index = this.headers.indexOf(header);\n    let classVector = this.values[index];\n\n    let nObs = classVector.length;\n    let type = typeof (classVector[0]);\n    let counts = {};\n    switch (type) {\n      case 'string':\n        counts = summaryAClass(classVector);\n        break;\n      case 'number':\n        classVector = classVector.map((x) => x.toString());\n        counts = summaryAClass(classVector);\n        break;\n    }\n    let groupIDs = Object.keys(counts);\n    let nClass = groupIDs.length;\n    // let classFactor = classVector.map((x) => groupIDs.indexOf(x));\n\n    return { class: header, groups: counts, nObs, nClass };\n  }\n\n  sample(header, options = {}) {\n    const { fraction = 0.8 } = options;\n    let classVector = this.get(header, 'string');\n    let { trainIndex, testIndex, mask } = sampleAClass(classVector, fraction);\n\n    return {\n      trainIndex,\n      testIndex,\n      mask,\n      classVector\n    };\n  }\n}\n\nfunction summaryAClass(classVector) {\n  let counts = {};\n  classVector.forEach((x) => {\n    counts[x] = (counts[x] || 0) + 1;\n  });\n  return counts;\n}\n\nfunction sampleAClass(classVector, fraction) {\n  // sort the vector\n  let classVectorSorted = JSON.parse(JSON.stringify(classVector));\n  let result = Array.from(Array(classVectorSorted.length).keys())\n    .sort((a, b) => (classVectorSorted[a] < classVectorSorted[b] ? -1 :\n      (classVectorSorted[b] < classVectorSorted[a]) | 0));\n  classVectorSorted.sort((a, b) => (a < b ? -1 : (b < a) | 0));\n\n  // counts the class elements\n  let counts = summaryAClass(classVectorSorted);\n  console.log('counts', counts);\n  // pick a few per class\n  let indexOfSelected = [];\n  Object.keys(counts).forEach((e, i) => {\n    let shift = [];\n    Object.values(counts).reduce((a, c, i) => shift[i] = a + c, 0);\n    console.log(shift);\n    let arr = [...Array(counts[e]).keys()];\n\n    let r = [];\n    for (let i = 0; i < Math.floor(counts[e] * fraction); i++) {\n      let n = arr[Math.floor(Math.random() * arr.length)];\n      r.push(n);\n      let ind = arr.indexOf(n);\n      arr.splice(ind, 1);\n    }\n\n    if (i === 0) {\n      indexOfSelected = indexOfSelected.concat(r);\n    } else {\n      indexOfSelected = indexOfSelected\n        .concat(r.map((x) => x + shift[i - 1]));\n    }\n  });\n\n  // sort back the index\n  let trainIndex = [];\n  indexOfSelected.forEach((e) => trainIndex.push(result[e]));\n\n  let testIndex = [];\n  let mask = [];\n  classVector.forEach((el, idx) => {\n    if (trainIndex.includes(idx)) {\n      mask.push(true);\n    } else {\n      mask.push(false);\n      testIndex.push(idx);\n    }\n  });\n  return { trainIndex, testIndex, mask };\n}\n\nexports.METADATA = METADATA;\n"],"names":["Object","defineProperty","exports","value","METADATA","constructor","values","options","columns","rows","metadata","headers","IDs","length","Array","keys","map","x","toString","load","name","TypeError","RangeError","toJSON","list","append","by","header","console","warn","includes","Error","push","ID","idx","remove","index","forEach","el","id","indexOf","splice","get","classVector","summary","nObs","type","counts","summaryAClass","groupIDs","nClass","class","groups","sample","fraction","trainIndex","testIndex","mask","sampleAClass","classVectorSorted","JSON","parse","stringify","result","from","sort","a","b","log","indexOfSelected","e","i","shift","reduce","c","arr","r","Math","floor","n","random","ind","concat"],"mappings":"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"}