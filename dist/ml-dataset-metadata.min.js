!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).mlDatasetMetadata={})}(this,(function(e){"use strict";var t,s=function(e,t){return e(t={exports:{}},t.exports),t.exports}((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{columns:s,rows:r}=[];if(!0===e){const e=t;this.headers=e.headers,this.IDs=e.IDs,this.values=t.values}else{s=e.length,r=e[0].length,this.values=e;let{headers:n=[...Array(s).keys()].map(e=>(e+1).toString()),IDs:a=[...Array(r).keys()].map(e=>(e+1).toString())}=t;this.headers=n,this.IDs=a}}static load(e){if("string"!=typeof e.name)throw new TypeError("metadata must have a name property");if("metadata"!==e.name)throw new RangeError("invalid model: ".concat(e.name));return new s(!0,e)}toJSON(){return{name:"metadata",headers:this.headers,IDs:this.IDs,values:this.values}}list(){return this.headers}append(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"column",s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("column"===t){let{header:t=(this.headers.length+1).toString()}=s;if("string"!=typeof t&&(console.warn("header was coerced to string"),t=t.toString()),this.headers.includes(t))throw new Error("this header already exist");if(e.length!==this.values[0].length)throw new Error("dimension doesn't match");this.values.push(e),this.headers.push(t)}else if("row"===t){let{ID:t=(this.IDs.length+1).toString()}=s;if("string"!=typeof t&&(console.warn("ID was coerced to string"),t=t.toString()),this.IDs.includes(t))throw new Error("this ID already exist");if(e.length!==this.values.length)throw new Error("dimension doesn't match");this.values.map((t,s)=>t.push(e[s])),this.IDs.push(t)}return this}remove(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"row";return"object"!=typeof e&&(e=[e]),"column"===t?(e.forEach((t,s)=>{"number"==typeof t&&(e[s]=this.headers[t])}),e.forEach((t,s)=>{let r=this.headers.indexOf(e[s]);r>-1&&(this.headers.splice(r,1),this.values.splice(r,1))})):"row"===t&&(e.forEach((t,s)=>{"number"==typeof t&&(e[s]=this.IDs[t])}),e.forEach((t,s)=>{let r=this.IDs.indexOf(e[s]);r>-1&&(this.IDs.splice(r,1),this.values.map(e=>e.splice(r,1)))})),this}get(e){let t=this.headers.indexOf(e);return this.values[t]}summary(e){let t=this.headers.indexOf(e),s=this.values[t],n=s.length,a={};switch(typeof s[0]){case"string":a=r(s);break;case"number":a=r(s=s.map(e=>e.toString()))}return{class:e,groups:a,nObs:n,nClass:Object.keys(a).length}}sample(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const{fraction:s=.8}=t;let n=this.get(e,"string"),{trainIndex:a,testIndex:o,mask:i}=function(e,t){let s=JSON.parse(JSON.stringify(e)),n=Array.from(Array(s.length).keys()).sort((e,t)=>s[e]<s[t]?-1:s[t]<s[e]|0);s.sort((e,t)=>e<t?-1:t<e|0);let a=r(s);console.log("counts",a);let o=[];Object.keys(a).forEach((e,s)=>{let r=[];Object.values(a).reduce((e,t,s)=>r[s]=e+t,0),console.log(r);let n=[...Array(a[e]).keys()],i=[];for(let s=0;s<Math.floor(a[e]*t);s++){let e=n[Math.floor(Math.random()*n.length)];i.push(e);let t=n.indexOf(e);n.splice(t,1)}o=0===s?o.concat(i):o.concat(i.map(e=>e+r[s-1]))});let i=[];o.forEach(e=>i.push(n[e]));let h=[],l=[];return e.forEach((e,t)=>{i.includes(t)?l.push(!0):(l.push(!1),h.push(t))}),{trainIndex:i,testIndex:h,mask:l}}(n,s);return{trainIndex:a,testIndex:o,mask:i,classVector:n}}}function r(e){let t={};return e.forEach(e=>{t[e]=(t[e]||0)+1}),t}t.METADATA=s})),r=(t=s)&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t,n=s.METADATA;e.METADATA=n,e.default=r,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=ml-dataset-metadata.min.js.map
